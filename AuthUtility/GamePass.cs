using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace AuthUtility
{
    public class GamePassData
    {
        public string userId;
        public string redirectUrl;
        public DateTime expires;
    }

    /// <summary>
    /// Signed Pass for LobbyServer and GameServer. (RSA)
    /// Describes User is who.
    /// Generated by PortalServer.
    /// </summary>
    public class GamePass
    {
        public GamePassData data = new GamePassData();
        public string sign;

        /// <summary>
        /// Returns true if sign is valid.
        /// </summary>
        /// <param name="publicKey"></param>
        /// <returns></returns>
        public bool IsValid(string publicKeyXmlString, string redirectUrlRequested)
        {
            // Valid redirectUrl?
            if (data.redirectUrl != redirectUrlRequested)
                return false;

            // Expired?
            if (data.expires < DateTime.UtcNow)
                return false;

            using (var rsa = new RSACryptoServiceProvider())
            {
                var json = JsonConvert.SerializeObject(data);
                var bytes = System.Text.Encoding.UTF8.GetBytes(json);
                try
                {
                    rsa.FromXmlString(publicKeyXmlString);
                    return rsa.VerifyData(bytes, CryptoConfig.MapNameToOID("SHA512"), Convert.FromBase64String(sign));
                }
                catch
                {
                    return false;
                }
            }
        }

        /// <summary>
        /// Signs data using SHA512.
        /// </summary>
        /// <param name="privateKey"></param>
        public void SignThis(string privateKeyXmlString)
        {
            using (var rsa = new RSACryptoServiceProvider())
            {
                var json = JsonConvert.SerializeObject(data);
                var bytes = System.Text.Encoding.UTF8.GetBytes(json);
                try
                {
                    rsa.FromXmlString(privateKeyXmlString);
                    sign = Convert.ToBase64String(rsa.SignData(bytes, CryptoConfig.MapNameToOID("SHA512")));
                }
                catch
                {
                    sign = null;
                }
            }
        }

        public static GamePass FromBase64EncodedJson(string base64String)
        {
            return JsonConvert.DeserializeObject<GamePass>(System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(base64String)));
        }

        public string ToBase64EncodedJson()
        {
            return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(this)));
        }
    }
}
